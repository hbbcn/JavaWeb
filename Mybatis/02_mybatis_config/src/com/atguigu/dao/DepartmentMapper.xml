<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.dao.DepartmentMapper">

    <select id="getDeptById" resultType="com.atguigu.mybatis.Department">
        select id, dept_name as departmentName
        from tb_dept
        where id = #{id};
    </select>

    <!--
    场景二：
            查询部门的时候将部门对应的所有的员工信息也查询出来

    -->

    <!--
        collection嵌套结果集的方式，定义关联的集合类型元素的封装规则
    -->
    <!--public Department getDeptByIdPlus(@Param(value = "id")Integer id);-->
    <resultMap id="MyDept" type="com.atguigu.mybatis.Department">

        <id column="did" property="id"/>
        <result column="dept_name" property="departmentName"/>
        <!-- collection定义关联的集合的属性的封装规则
              ofType:指定集合里面元素的类型
        -->
        <!--查询部门的时候将部门对应的所有的员工信息也查询出来-->
        <collection property="emps" ofType="com.atguigu.mybatis.Employee">
            <!-- 定义这个元素的封装规则-->
            <id column="eid" property="id"/>
            <result column="name" property="name"/>
            <result column="gender" property="gender"/>
            <result column="email" property="email"/>
        </collection>

    </resultMap>

    <select id="getDeptByIdPlus" resultMap="MyDept">
        SELECT d.id        did,
               d.dept_name dept_name,
               e.id        eid,
               e.name      name,
               e.email     email,
               e.gender    gender
        FROM tb_dept d
                 LEFT JOIN tb_employee e ON e.d_id = d.id
        WHERE d.id = #{id}
    </select>


    <resultMap id="MyDeptStep" type="com.atguigu.mybatis.Department">
        <id column="id" property="id"/>
        <result column="dept_name" property="departmentName"/>
        <collection property="emps"
                    select="com.atguigu.dao.EmployeeMapperPlus.getEmpByDeptId"
                    column="{did=id}" fetchType="lazy"/>
        <!-- 扩展：多列的值传递过去
                    将多列的值封装map传递
                    column"{key1=column1,key2=column2}"
                     fetchType="lazy":表示使用延迟加载：
                           — lazy:延迟
                           — eager:立即
        -->
    </resultMap>
    <!--public Department getDepartmentByIdStep(@Param(value = "id") Integer id)-->
    <select id="getDeptByIdStep" resultMap="MyDeptStep">

        select id, dept_name as departmentName
        from tb_dept
        where id = #{id};

    </select>
</mapper>
