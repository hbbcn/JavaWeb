<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.dao.EmployeeMapperDynamicSQL">

    <!--
    if：判断
    choose(when,otherwise):分支选择：switch-case
        如果带了id就用id查，如果带了name就用name查
    trim：截取(where(封装查询条件),set(封装修改条件))
    foreach
    -->

    <!--查询员工，要求，携带了哪个字段查询条件就带上这个字段的值-->
    <!--    public List<Employee> getEmpsByConditionIf(Employee employee);-->
    <select id="getEmpsByConditionIf" resultType="com.atguigu.mybatis.Employee">
        select * from tb_employee
        <where>
            <!-- test:判断表达式(OGNL)
            OGNL会进行字符串和数字的转换
             遇见特殊符号应该写转义字符
             &&：&amp  -->
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="name!=null and name!=''">
                and name like #{name}
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                and email=#{email}
            </if>
            <if test="gender=='男' and gender=='女'">
                and gender=#{gender}
            </if>
        </where>
    </select>

    <!--    public List<Employee> getEmpsByConditionTrim(Employee employee);-->
    <select id="getEmpsByConditionTrim" resultType="com.atguigu.mybatis.Employee">
        select * from tb_employee
        <!-- 后面多出的and 或者 or where 标签不能解决
        prefix="":前缀，trim标签是整个字符串拼串后的结果
                prefix给拼串的整个字符串加一个前缀
        prefixOverrides=""
                前缀覆盖，去掉整个字符串前面多余的字符
        suffix="" 后缀：
                 suffix给拼串后的整个字符串加一个后缀
        suffixOverrides=""
                  后缀覆盖，去掉整个字符串后面多余的字符
         -->
        <!--trim:自定义字符串截取规则 -->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="name!=null and name!=''">
                name like #{name} and
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                email=#{email} and
            </if>
            <if test="gender=='男' and gender=='女'">
                gender=#{gender}
            </if>

        </trim>

    </select>

    <!-- public List<Employee> getEmpsByConditionChoose();-->
    <select id="getEmpsByConditionChoose" resultType="com.atguigu.mybatis.Employee">
        select * from tb_employee
        <where>
            <!-- choose(when,otherwise):分支选择：switch-case
            如果带了id就用id查，如果带了name就用name查 -->

            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="name!=null">
                    name like #{name}
                </when>
                <when test="email!=null">
                    email = #{email}
                </when>
                <otherwise>
                    gender="女"
                </otherwise>
            </choose>
        </where>
    </select>

    <!--public void updateEmp(Employee employee);-->
    <update id="updateEmp">
        <!--      update tb_employee
              &lt;!&ndash; set标签使用 &ndash;&gt;
                <set>
                    <if test="name!=null">
                        name=#{name},
                    </if>
                    <if test="gender!=null">
                        gender=#{gender},
                    </if>
                    <if test="email!=null">
                        email=#{email}
                    </if>

                </set>
                where id=#{id}
                -->
        update tb_employee
        <!-- trim更新拼串 -->
        <trim prefix="set" suffixOverrides=",">
            <if test="name!=null">
                name=#{name},
            </if>
            <if test="gender!=null">
                gender=#{gender},
            </if>
            <if test="email!=null">
                email=#{email}
            </if>
        </trim>
        where id=#{id}
    </update>

    <!--批量查询-->
    <!--    public List<Employee> getEmpsConditionForeach(List<Integer> ids);-->
    <select id="getEmpsConditionForeach" resultType="com.atguigu.mybatis.Employee" parameterType="List">
        select * from tb_employee where id in
        <!--
  collection 指定要遍历的集合
  list类型的参数会特殊处理封装在map中，map中的key就叫list
  item:将当前遍历的元素赋值给指定的变量
  sepatetor:每个元素之间的分隔符
  open:遍历出所有结果拼接一个开始的字符
  close:遍历出所有结果拼接一个结束的字符
  index:遍历list的时候是索引
          如果遍历的是map的时候就表示map中的Key，item就是map中的值
  #{变量名}就能取出变量的值也就是当前遍历的元素
-->
        <foreach collection="ids" item="item_id" separator=","
                 open="(" close=")">
            #{item_id}
        </foreach>
    </select>

    <!--    public void addEmps(@Param("emps") List<Employee> emps);-->
    <!--批量保存-->
    <!--MySQL下批量保存，可以foreach遍历 mysql支持values(),(),() -->
    <!--    <insert id="addEmps">
            insert into tb_employee(name,gender,email,d_id)
            values
            <foreach collection="emps" item="emp" separator=",">
                (#{emp.name},#{emp.gender},#{emp.email},#{emp.dept.id})
            </foreach>
        </insert>-->

    <!--方式二 批量执行多个sql语句
     这种方式需要数据库连接jdbc.url=jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true
     这种分号分隔多个sql可以用于其他的批量操作(删除，修改)
    -->
    <insert id="addEmps">
        <foreach collection="emps" item="emp" separator=";">
            insert into tb_employee(
          <!-- include 引用外部定义的sql -->
            <include refid="insertColumn"></include>
            )
            values (#{emp.name},#{emp.gender},#{emp.email},#{emp.dept.id})
        </foreach>
    </insert>

    <!--oracle数据库批量保存
        oracle不支持values(),(),()
        oracle支持批量方式
        1、多个insert放在begin end里面
        2、利用中间表进行插入
    -->


    <!-- 两个内置参数；
        mybatis不只是方法传递过来的参数才可以用来判断，取值
        mybatis默认还有两个内置的参数
        _parameter:代表整个参数
                单个参数：_parameter就是这个参数
                多个参数：参数会被封装为一个map:_parameter就是代表这个map

        _databaseId:如果配置了databaseIdProvider标签
            _databaseId就是代表当前数据表的别名



    -->
    <!-- public List<Employee> getEmpsTestInnerParameter(Employee e);-->
    <select id="getEmpsTestInnerParameter" resultType="com.atguigu.mybatis.Employee">

    <!-- bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
        <bind name="_name" value="'%'+ name + '%'"/>
      <if test="_databaseId=='mysql'">
      select * from tb_employee
      <if test="_parameter!=null">
          where name like #{_name}
        <!-- 也可以写成#{_parameter.name}-->
      </if>

    </if>
    <if test="_databaseId=='oracle'">
        select * from tb_employee
    </if>

    </select>

    <!--
    sql标签抽取可重用的sql片段，方便后面引用 使用include标签引用
    1、经常将要查询的列名，或者插入的列名抽取出来方便引用
    2、include来引用已经抽取的sql
    3、include还可以自定义一些property sql标签内部就能使用自定义的属性
            取值的正确的方式${prop}.
            #{不能使用这种方式}

    -->
    <sql id="insertColumn">
        <if test="_databaseId=='mysql'">
            name,gender,email,d_id
        </if>
        <if test="_databaseId=='oracle'">
            name,gender,email,d_id
        </if>

    </sql>

</mapper>