<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.dao.EmployeeMapperPlus">

    <!--javaBean的封装规则
    type:自定义规则的Java类型
    id:唯一id方便引用

    -->


    <resultMap id="MyEmp" type="com.atguigu.mybatis.Employee">

        <!--指定主键的封装规则:
            column:指定哪一列
            property:指定对应的javaBean属性
        -->
        <id column="id" property="id"></id>
        <!--定义普通列封装规则 -->
        <result column="name" property="name"/>
        <!--其他不指定的列会自动封装，我们只要写resultMap就 最好把全部的映射规则都写上-->
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        </resultMap>
    <!--resultMap:自定义结果集映射规则：-->
    <!-- public Employee getEmpById(Integer id);-->
    <select id="getEmpById" resultMap="MyEmp">
      select * from tb_employee where id = #{id};
    </select>

    <!--
        场景一：查询员工所在的部门信息
       方式一: 联合查询 联合级联属性封装结果集
    -->
 <!--   <resultMap id="MyDifEmp" type="com.atguigu.mybatis.Employee">
        <id column="id" property="id"></id>
        <result column="name" property="name"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
    </resultMap>
-->
    <!--方式二-->
    <!--
        association 可以指定联合的javaBean对象
        property:指定哪个属性的联合对象
        javaType:指定这个属性对象类型

        使用association定义关联的单个对象的封装给规则
    -->
    <resultMap id="MyDifEmp" type="com.atguigu.mybatis.Employee">
        <id column="id" property="id"></id>
        <result column="name" property="name"/>
        <association property="dept" javaType="com.atguigu.mybatis.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="departmentName"></result>
        </association>
    </resultMap>

    <!--public Employee getEmpAndDept(Integer id);-->
    <select id="getEmpAndDept" resultMap="MyDifEmp">
        select e.id id,e.name name, e.gender gender,e.d_id d_id,
        d.id did,d.dept_name dept_name from tb_employee e,tb_dept d
        WHERE e.d_id = d.id and e.id = #{id};
    </select>

    <!-- 使用association进行分布查询
          1、先按照员工id查询员工信息
          2、根据查询员工信息中的d_id值去部门表查出部门信息
          3、部门设置到员工中
    -->
    <resultMap id="MyEmpByStep" type="com.atguigu.mybatis.Employee">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="email" property="email"/>
        <!--使用association定义关联对象的封装
             select:表明当前属性是调用的select指定的方法查出的结果
             column:指定将哪一列的值传给这个方法
             流程：使用select指定的方法(传入column指定的这列参数的值) 查出对象 并封装给properties指定的属性
        -->
        <association property="dept"
          select="com.atguigu.dao.DepartmentMapper.getDeptById"
          column="d_id"/>

   </resultMap>

    <!--<select id="getEmpByIdStep" resultMap="MyEmpDis">-->
    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
        select * from tb_employee where id = #{id};
    </select>
    <!--
        可以使用延迟加载(懒加载)(按需加载)
        lazyLoadingEnabled：延迟加载的全局开关，当开启时 所有关联的对象都会延迟加载
        aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的的所有属性。否者每个属性会按需加载
        employee===>dept
                我们每次查询Employee对象的时候，都将一起查询出来
                部门信息在我们使用的时候再去查询
                分段查询的基础之上加上两个配置
    -->

    <!-- public List<Employee> getEmpByDeptId(Integer deptId);-->

    <resultMap id="MyEmpByDid" type="com.atguigu.mybatis.Employee">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </resultMap>
    <select id="getEmpByDeptId" resultMap="MyEmpByDid">

        select * from tb_employee where d_id = #{did}
        
    </select>


    <!--
        <discriminator javaType=""></discriminator>
        鉴别器:mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Employee:
                如果查出的是女生，就把部门信息查询出来，否则不查询
                如果是男生，把last_name这一列的值赋值给email
    -->
    <resultMap id="MyEmpDis" type="com.atguigu.mybatis.Employee">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
            column:指定判定的列名
            javaType:列值对应的java类型
         -->
        <!-- 如果查出的是女生，就把部门信息查询出来，否则不查询 -->
        <discriminator javaType="string" column="gender">
            <case value="女" resultType="com.atguigu.mybatis.Employee">
                    <association property="dept"
                                 select="com.atguigu.dao.DepartmentMapper.getDeptById"
                                 column="d_id">
                    </association>
            </case>
            <case value="男" resultType="com.atguigu.mybatis.Employee">
                <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="gender" property="gender"/>
            <result column="name" property="email"/>
        </case>
        </discriminator>
    </resultMap>

</mapper>