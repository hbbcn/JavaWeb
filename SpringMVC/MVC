#############################SpringMVC#########################
SpringMVC 是类似于 Struts2 的一个 MVC 框架，在实际开发中，接收浏览器的请求响应，对数据进行处理，然后返回页面进行显示

Spring MVC主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。他的两个核心是：
处理器映射：选择使用哪个控制器来处理请求
视图解析器：选择结果应该如何渲染
通过以上两点，Spring MVC保证了如何选择控制处理请求和如何选择视图展现输出之间的松耦合。

⭐⭐⭐⭐⭐SpringMVC搭建框架的步骤：
        ① 在pom.xml中添加需要的依赖
        ② 在web.xml中配置请求和响应的字符编码、配置处理请求方式的put、delete请求方式，配置springMVC的过滤器，配置DispatcherServlet前端控制器 并且设置springMVC的配置文件的位置
        ③ 在resource中创建springMVC配置文件，添加扫描组件，配置thymeleaf的视图解析器，配置<mvc:default-servlet-handler />  将静态资源的处理经由Spring MVC框架交回Web应用服务器处理
            开启组件驱动、配置文件上传解析器将上传的文件封装为MultipartFile、配置拦截器
WEB-INF下面的内容都是只能由服务器级别才能访问，客户端并不能访问。什么是客户端级别?什么是服务器级别呢

转发就是服务器级别，浏览器的地址不会变，因为，客户端发送一个请求，服务器受理之后，发现要请求内容还要再去别的请求，
那么转发就是服务器自己去处理完成。不麻烦客户端(浏览器)了，所以客户端上面的地址栏不会改变。
重定向：就是客户端级别的。服务器收到请求后，发现还要去请求别的内容，但是服务器自己不想处理，那么就告诉客户端，
你自己去处理吧，那么客户端就去请求那个别的内容了。所以客户端（浏览器）地址栏就会改变了。
一、springMVC简介：
    1、MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分.
        M：Model，模型层，指工程中的JavaBean,作用是处理数据
                JavaBean分为两类Bean:
                    |—— 一类称为实体类Bean: 是专门存储业务数据的，如Student、User
                    |—— 一类称为业务处理Bean: 指Service 或 Dao对象
        V: View 视图层： 指工程中的html或jsp等页面，作用是与用户进行交互，展示数据
        C: Controller 控制层：指工程中的servlet,作用是接收请求和响应浏览器
    MVC工作原理：客户端发送HTTP请求，DispatcherServlet控制器拦截到请求，调用HandlerMapping 解析请求对应的Handler，
    HandlerAdapter根据Handler来调用真正Controller方法处理请求，并处理相应的业务逻辑，Controller返回一个模型视图ModelAndView，
    ViewResolver进行解析，返回一个视图对象，DispatcherServlet渲染数据对象Model，将得到视图对象返回给客户端，最终显示在相应的页面上


    MVC工作流程：用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求
    处理完毕将结果返回到Controller,Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器

二、三层架构分为表述层（或表示层）、业务逻辑层、数据访问层 表述层表示前台页面和后台servlet

三、① @RequestMapping注解：处理请求和控制器方法之间的映射关系
       @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示上下文路径：http://localhost:8080/springMVC/
    ② @RequestMapping注解的位置
       @RequestMapping标识一个类：设置映射请求的路径的初始信息
       @RequestMapping标识一个方法：设置映射请求请求路径的具体信息
    ③ @RequestMapping
            |-- value属性： 通过请求的请求地址匹配请求映射
                            是一个字符串类型的数组，表示该请求能够匹配多个请求地址所对应的请求
                            value属性必须设置，至少通过请求地址匹配请求映射
            |-- method属性: method属性通过请求的请求方式(get或post)匹配请求映射
                            如果请求参数不满足method属性，则浏览器报错：405：Request method 'POST' not supported

            |-- params属性：可以通过四种表达式设置请求参数和请求映射的匹配关系
                            "param"：要求请求映射所匹配的请求必须携带param请求参数
                            "!param"：要求请求映射所匹配的请求必须不能携带param请求参数
                            "param=value"：要求请求映射所匹配的请求必须携带param请求参数且param=value
                            "param!=value"：要求请求映射所匹配的请求必须携带param请求参数但是param!=value
            |--header了解：是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系

    RESTful简介
        REST:Representational State Transfer,表现层资源状态转移。
        RESTful具体说：就是HTTP协议里面，四个表示操作方式的动词:GET、POST、PUT、DElETE
        它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源、PUT用来更新资源、DELETE用来删除资源。

        REST风格提倡URL地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，
        而是将要发送给服务器的数据作为URL的一部分，以保证整体风格的一致性。
    注：对于处理指定请求方式的控制器，SpringMVC中提供了@RequestMapping的派生注解
        > 处理get请求的映射--> @GetMapping
        > 处理post请求的映射--> @PostMapping
        > 处理put请求的映射--> @PutMapping
        > 处理delete请求的映射--> @DeleteMapping
        常用的请求方式有get,post,put,delete
四、@RequestParam
    @RequestParam是将请求参数和控制器方法的形参创建映射关系
    @RequestParam注解一共有三个属性：
        value：指定为形参赋值的请求参数的参数名
        required：设置是否必须传输此请求参数，默认值为true
                  若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置
                  defaultValue属性，则页面报错400：Required String parameter 'xxx' is not present；若设置为
                  false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null
        defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值
                  为""时，则使用默认值为形参赋值
五、域对象共享数据
   ① 使用ServletAPI向request域对象共享数据
   ② 使用ModelAndView向request域对象共享数据
        ModelAndView有Model和View的功能
        Model主要用于向请求域共享数据
        View主要用于设置视图，实现页面跳转
   ③ 使用Model向request域对象共享数据
   ④ 使用map向request域共享数据
   ⑤ 使用ModelMap向request域对象共享数据
Model、ModelMap、Map类型的参数其实本质上都是BindingAwareModelMap类型

HttpMessageConvert,报文信息转换器，将请求报文转换为Java对象，或将java对象转换为响应报文
HttpMessageConvert提供了了两个注解和两个类型：@RequestBody,@ResponseBody,RequestEntity,ResponseEntity
RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参
SpringMVC处理json


六、拦截器的三个抽象方法
        preHandle:控制器方法执行之前执行preHandle(),其boolean类型返回值表示是否拦截或者放行，
    返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法
        postHandle:控制器方法执行之后执行
        afterComplation:处理完视图和模型数据，渲染视图完毕之后执行

七、springMVC常用组件
    ① DispatcherServlet:前端控制器
    作用：统一处理请求和响应，整个流程控制的中心，由它调用其他组件处理用户的请求
    ② HandlerMapping:处理器映射器
    作用：根据请求的url,method等信息查找Handler,即控制器方法啊
    ③ Handler:处理器
    作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理
    ④ HandlerAdapter:处理器适配器
    作用：通过HandlerAdapter对处理器（控制器方法）进行执行
    ⑤ ViewResolver:视图解析器
    作用：进行视图解析，得到相应的视图：例如：RedirectView,InternalResourceView.ThymeleafView
    ⑥ View:视图
    作用：将模型数据通过页面展示给用户

前端控制器（DispatcherServlet）：接收请求，响应结果，相当于电脑的CPU。
处理器映射器（HandlerMapping）：根据URL去查找处理器
处理器（Handler）：（需要程序员去写代码处理逻辑的）
处理器适配器（HandlerAdapter）：会把处理器包装成适配器，这样就可以支持多种类型的处理器，类比笔记本的适配器（适配器模式的应用）
视图解析器（ViewResolver）：进行视图解析，多返回的字符串，进行处理，可以解析成对应的页面

#################################重定向和转发的区别###############################
1、请求次数：重定向是浏览器向服务器发送一个请求并收到响应后再次向一个新地址发出请求，
转发是服务器收到请求后为了完成响应跳转到一个新的地址；重定向至少请求两次，转发请求一次：
2、地址栏不同：重定向地址栏会发生变化，转发地址栏不会发生变化；
3、是否共享数据：重定向两次请求不共享数据，转发一次请求共享数据（在request级别使用信息共享，使用重定向必然出错）；
4、跳转限制：重定向可以跳转到任意URL，转发只能跳转本站点资源；
5、发生行为不同：重定向是客户端行为，转发是服务器端行为；


请求报文，get请求没有请求体，而是拼接在地址栏中 post有请求体
@RestController标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解



############################Filter的作用##########################
1、Filter过滤器它是JavaEE的规范，也就是接口
2、Filter过滤器的作用：拦截请求，过滤响应
        拦截请求常见的场景有：权限检查 日记操作 事务管理.....




#############################其他注解############################
@PathVariable注解：绑定它传过来的值到方法的参数上
@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值
@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器
@ControllerAdvice将当前类标识为异常处理的组件


RequestParam  汉语意思就是： 请求参数。顾名思义 就是获取参数的
PathVariable  汉语意思是：路径变量。顾名思义，就是要获取一个url 地址中的一部分值，那一部分呢？
　　RequestMapping 上说明了@RequestMapping(value="/emp/{id}"），我就是想获取你URL地址 /emp/ 的后面的那个 {id｝的
 　 @PathVariable是用来获得请求url中的动态参数的
　　因此，就看‘？’ 若是想获取 ‘？’ 后面的pageNo 的值 ‘2’， 就使用RequestParam 。若想获取的是url 地址的一部分 ‘7’ 就使用PathVariable
 @RequestParam和@PathVariable都能够完成类似的功能——因为本质上，它们都是用户的输入，只不过输入的部分不同，一个在URL路径部分，另一个在参数部分。要访问一篇博客文章，这两种URL设计都是可以的：

通过@PathVariable，例如/blogs/1
通过@RequestParam，例如blogs?blogId=1
那么究竟应该选择哪一种呢？建议：

1、当URL指向的是某一具体业务资源（或资源列表），例如博客，用户时，使用@PathVariable
2、当URL需要对资源或者资源列表进行过滤，筛选时，用@RequestParam
例如我们会这样设计URL：
/blogs/{blogId}
/blogs?state=publish而不是/blogs/state/publish来表示处于发布状态的博客文章

