/******************* Spring **********************/

框架就是你在实际开发中，用者可以让使减少很多重复的代码、让代码的结构更加清晰，耦合度更低，后期维护方便
一、Spring框架概述
    1、Spring是轻量级的开源的JavaEE框架.
    2、Spring可以解决企业应用开发的复杂性.
    3、Spring有两个核心部分：IOC和AOP.
        IOC：控制反转(Inversion of Controll)把创建对象过程交给Spring进行管理.
        Aop: 面向切面(AOP为Aspect Oriented Programming)不修改源代码进行功能增强.

    4、Spring特点
        (1) 方便解耦，简化开发
        (2) Aop编程支持
        (3) 方便程序测试
        (4) 方便和其他框架进行整合
        (5) 方便进行事务操作
        (6) 方便API开发难度(如：JDBC进行封装)

        |-- 导入spring jar包
            |-- core container
                |-- beans spring-beans-5.2.6.RELEASE.jar
                |-- core spring-core-5.2.6.RELEASE.jar
                |-- context spring-context-5.2.6.RELEASE.jar
                |-- expression spring-expression-5.2.6.RELEASE.jar
        |-- 日志包 commons-logging-1.1.1.jar

    5、IOC(概念和原理)
      5.1、
        (3) 做入门案列就是IOC实现
        (1) 控制反转、把对象创建和对象之间的调用过程，交给Spring进行管理
        (2) 使用IOC目的：为了耦合度降低
        (3) 做入门案列就是IOC实现

      5.2、IOC容器
         (1) IOC底层原理
         (2) IOC接口(BeanFactory)
         (3) IOC操作Bean管理(基于xml)
         (4) IOC操作Bean管理(基于注解)


      5.3、IOC底层原理
        (1) xml解析、工厂模式、反射

      5.4、IOC(接口)
        (1) IOC思想基于IOC容器完成，IOC容器底层就是对象工厂
        (2) Spring提供IOC容器实现两种方式：两个接口
              |-- BeanFactory: IOC基本实现方式，是Spring内部使用接口，不提供开发人员进行使用
                               加载配置文件的时候不会创建对象，在获取（使用）对象的时候才会去创建对象
              |-- ApplicationContext:BeanFactory接口的子接口，提供更多强大的功能，一般由开发人员进行使用
                               加载配置文件的时候就会把配置文件对象进行创建
                            |--ApplicationContext接口的实现类
                                    |-- FileSystemXmlApplicationContext //配置文件在盘符下的路径
                                    |-- ClassPathXmlApplicationContext //配置文件在src下的内容

    6、IOC操作Bean管理(基于xml方式)
        6.1 什么是Bean管理
            (1) Bean管理是指两个操作：Spring创建对象，Spring注入属性
        6.2 基于xml配置文件方式实现
            |-- 基于xml方式创建对象

            |-- 基于xml方式注入属性
                    | DI:依赖注入，就是注入属性
                            |-- 第一种注入方式：使用set方法进行注入
                            |-- 第二种注入方式：使用有参构造进行注入


        6.2 Spring 有两种类型bean,一种是普通bean,另一种是工厂bean(FactoryBean)
            |-- 普通bean: 再配置文件中定义bean类型就是就是返回类型

            在Spring框架下，当Bean实例 A运行过程中需要引用另外一个Bean实例B时，Spring框架会创建Bean的实例B，
            并将实例B通过实例A的构造函数、set方法、自动装配和注解方式注入到实例A，这种注入实例Bean到另外一个实例Bean的过程称为依赖注入

            IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。
            这一点是通过DI（Dependency Injection，依赖注入）来实现的

            Spring容器
            Spring就是一个容器，它通过配置文件或注解描述类和类之间的依赖关系，自动完成类的初始化和依赖注入的工作。
            让开发着可以从这些底层实现类的实例化、依赖关系装配等工作中解脱出来，专注于更有意义的业务逻辑开发。

            首先想说说IoC（Inversion of Control，控制反转）。这是spring的核心，贯穿始终。所谓IoC，
            对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，
            举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，
            然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，
            然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，
            在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），
            使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。

　　        那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。
        婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，
        身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，
        我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。
        整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，
        所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，
        把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，
        也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，
        现在是所有对象都被spring控制，所以这叫控制反转。

            IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）
        来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，
        A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，
        然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，
        而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？
         Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、
         改变对象的属性，spring就是通过反射来实现注入的。

        　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。

        6.3 bean作用域
            在Spring里面，默认情况下，bean是单实例对象

            如何设置多实例，在bean标签内有scope属性
            单实例多次创建对象相同即只有一种实例
            多实例多次创建对象不相同即可以创建多种实例
            singleton单实例，prototype多实例

                区别：设置scope值是singleton的时候，加载spring配置文件时候就会创建单实例对象
                      设置scope值是prototype的时候，不是在加载spring配置文件时创建对象，在调用getBean方法时候创建对象 为多实例对象

        6.4  bean标签属性autowire,配置自动注入装配
                   autowire属性常用的两个值：
                           byName根据属性名称注入: 注入值bean的id值和类属性名称一样
                           byType根据属性类型注入

    7、IOC操作Bean管理(基于注解方式)
                javax.annotation-api-1.3.2.jar
                spring-aop-5.2.6.RELEASE.jar
        (1) Spring 针对 Bean 管理中创建对象提供注解
            @Component
            @Service
            @Controller
            @Repository
         (2) 基于注解方式实现属性注入
           ① @Autowired：根据属性类型进行自动装配
           ② @Qualifier：根据名称进行注入
              这个@Qualifier 注解的使用，和上面@Autowired 一起使用
           ③ @Resource：可以根据类型注入，可以根据名称注入
           ④ @Value：注入普通类型属性
二、AOP
    1、
       ① 面向切面编程，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，
          提高程序的可重用性，同时提高了开发的效率
          通述描述：不通过修改源代码方式添加新的功能
       ② AOP底层使用动态代理
                |-- 有两种情况动态代理：
                            |-- 第一种情况：有接口实现类代理对象，使用JDK动态代理
                            |-- 第二种情况：没有接口情况，使用CGLIB动态代理

    2、AOP(术语)
        ① 连接点：类里面哪些方法可以增强，这些方法称为连接点
        ② 切入点：实际被真正增强的方法，称为切入点
        ③ 通知(增强)：实际增强的逻辑部分称为通知(增强)
                |-- 通知有多种类型
                        |-- 前置通知 后置通知 环绕通知 异常通知 最终通知


        ④ 切面：是动作 把通知应用到切入点过程
        织入（Weaving） 织入就是将增强添加到对目标类具体连接点上的过程。
        织入是一个形象的说法，具体来说，就是生成代理对象并将切面内容融入到业务流程的过程。

    3、AOP操作
        (1) Spring 框架一般都是基于AspectJ实现AOP操作
            ① AspectJ不是Spring组成部分，独立AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作
        (2) 基于AspectJ实现AOP操作
            ① 基于xml配置文件实现
            ② 基于注解方式实现(使用)
        (3) 在项目工程里面引入AOP相关依赖
            ① spring-aspects-5.2.6.RELEASE.jar
            ② com.springsource.net.sf.cglib-2.2.0.jar
            ③ com.springsource.org.aopalliance-1.0.0.jar
            ④ com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar

    4、切入表达式
        (1) 切入表达式作用：知道对哪个类里面的哪个方法进行增强
        (2) 语法结构
        execution([权限修饰符][返回类型][方法名称]([参数列表]))
        举例1：对com.atguigu.dao.BookDao类里面的add进行增强
                execution(* com.atguigu.dao.BookDao.add(..))
        举例2：对com.atguigu.dao.BookDao类里面的所有方法进行增强
                execution(* com.atguigu.dao.BookDao.*(..))
        举例3：对com.atguigu.dao包里面的所有类 类里面的所有方法进行增强
                execution(* com.atguigu.dao.*.*(..))
三、JdbcTemplate
      (1) JdbcTemplate: Spring框架对JDBC进行封装，使用JdbcTemplate更方便实现对数据库操作
      (2) 准备工作：① 引入相关jar包，② 在spring配置文件配置数据库连接池
                    ③ 配置JdbcTemplate对象，注入DataSource, ④ 创建service类，创建dao类，在dao注入JdbcTemplate对象
      (3)① JdbcTemplate对象里面update(sql,Obejct...args)方法实现数据的添加，修改，删除操作
         ② JdbcTemplate对象里面queryForObject(String sql,Class<T> requiredType)实现查询返回某个值
         ③ JdbcTemplate对象里面queryForObject(String sql,RowMapper<T> rowMapper,Object...args)实现查询返回对象
         ④ JdbcTemplate对象里面query(String sql,RowMapper<T> rowMapper,Object...args)方法实现查询返回集合
         ⑤ JdbcTemplate对象里面batchUpdate(String,List<Object[]> batchArgs)方法实现对数据的批量添加，修改，删除操作


四、事务概念
    (1) 事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败
    (2) 事务四个特性(ACID)
        ① 原子性(automicity)
        ② 一致性(consistency)
        ③ 隔离性(isolation)
        ④ 持久性(durability)
    (3) 建议事务添加到JavaEE三层结构里面Service层(业务逻辑层)
    (4) Spring进行事务管理操作有两种方式：编程式管理和声明式管理(使用)
    (5) 声明式事务管理
         ① 基于注解方式(使用)
         ② 基于xml配置文件方式
    (6) 在Spring进行声明式事务管理，底层使用AOP原理
    (7) @Transactional,这个注解添加到类上面，也可以添加到方法上面
        ① 如果把这个注解添加到类上面，这个类里面所有的方法都添加事务
        ② 如果把这个注解添加到方法上面，只为这个方法添加事务
    (8) 事务操作(声明式事务管理参数配置)
        ① propagation: 事务传播行为
           |-- 事务方法：对数据库表数据进行变化的操作
           |-- Spring框架事务传播行为有7种
                 REQUIRED 如果事务方法里面调用的其他方法没有添加事务注解本身方法添加了注解，在调用里面的方法时，会创建新事务
                 REQUIRED_NEW 无论方法是否有事务，都会创建新的事务
 1、PROPAGATION_REQUIRED:默认的Spring事物传播级别，若当前存在事务，则加入该事务，若不存在事务，则新建一个事务。
 2、PAOPAGATION_REQUIRE_NEW:若当前没有事务，则新建一个事务。若当前存在事务，则新建一个事务，新老事务相互独立。外部事务抛出异常回滚不会影响内部事务的正常提交。
 3、PROPAGATION_NESTED:如果当前存在事务，则嵌套在当前事务中执行。如果当前没有事务，则新建一个事务，类似于REQUIRE_NEW。
 4、PROPAGATION_SUPPORTS:支持当前事务，若当前不存在事务，以非事务的方式执行。
 5、PROPAGATION_NOT_SUPPORTED:以非事务的方式执行，若当前存在事务，则把当前事务挂起。
 6、PROPAGATION_MANDATORY:强制事务执行，若当前不存在事务，则抛出异常。
 7、PROPAGATION_NEVER:以非事务的方式执行，如果当前存在事务，则抛出异常。

        ② isolation:事务隔离级别
            脏读：一个未提交事务读取到另一个未提交事务的数据
            不可重复读：一个未提交事务读取到另一个提交事务修改数据
            幻读：一个未提交数据事务读取到另一个提交事务添加的数据
            |-- 通过设置隔离级别解决读的问题
                    read uncommitted: 读未提交
                    read commit: 读已提交
                    repeatable read: 可重复读
                    serializable: 序列化
        ③ timeout: 超时时间
             事务需要在设定的时间内进行提交，如果不提交进行回滚
             默认是是-1 就是不超时
        ④ readOnly:是否只读
                |-- 读：查询操作 写：添加修改删除操作
                |-- 默认值是false 表示可以查询添加修改删除操作
                |-- 设置值为true之后，只能查询
        ⑤ rollbackFor: 回滚
                |-- 设置出现哪些异常进行事务回滚
        ⑦ noRoolbackFor
                |-- 设置出现哪些异常不进行事务回滚

    (9) 事务操作(xml声明式事务管理)
        ① 配置事务管理器
        ② 配置通知
        ③ 配置切入点和切面


spring中的事务
        ①在xml中配置事务管理器，然后注入数据源
        ②开启事务注解
        ③在类上添加事务注解@Transactional

##############################易错易忘点###########################
什么是 XML?
    XML 指可扩展标记语言（EXtensible Markup Language）
    XML 是一种标记语言，很类似 HTML
    XML 的设计宗旨是传输数据，而非显示数据
    XML 标签没有被预定义。您需要自行定义标签。
    XML 被设计为具有自我描述性。
    XML 是 W3C 的推荐标准

XML 与 HTML 的主要差异
    XML 不是 HTML 的替代。
    XML 和 HTML 为不同的目的而设计：
    XML 被设计为传输和存储数据，其焦点是数据的内容。
    HTML 被设计用来显示数据，其焦点是数据的外观。
    HTML 旨在显示信息，而 XML 旨在传输信息。

HTML是一种超文本传输协议，规定了浏览器与服务端之间数据传输的格式，是一种标识性的代码语言，
    它的中文翻译是“超文本标记语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。


1、通过xml创建对象，给属性赋值，一定要有set方法——即通过set方法注入属性的值
2、<bean  class="com.atguigu.service.UserService"> 在不写id标签的时候spring会默认id为类名 其首字母小写
  UserService userService = context.getBean(UserService.class); 也可以不写name参数


##############################spring bean##############################

1、 bean生命周期
 *      1、通过无参构造器创建bean实例
 *      2、为bean的属性设置值和其他bean引用(调用set方法)
 *      3、调用bean的初始化方法(需要进行配置)
 *      4、通过getBean获取对象
 *      5、当容器关闭的时候，调用bean的销毁的方法(需要进行配置)
 *
 * 加上后置处理器后bean生命周期一共是七步
 *      1、通过无参构造器创建bean实例
 *      2、为bean的属性设置值和其他bean引用(调用set方法)
 *      3、把bean实例传递bean后置处理器的方法
 *      4、调用bean的初始化方法(需要进行配置)
 *      5、把bean实例传递bean后置处理器的方法
 *      6、通过getBean获取对象
 *      7、当容器关闭的时候，调用bean的销毁的方法(需要进行配置)

 1 当@Scope为singleton时,bean会在ioc初始化时就被实例化,默认为singleton,可以配合@Lazy实现延时加载
 2 当@Scope为prototype时,bean在ioc初始化时不会被实例化,只有在使用时,或者手动context.getBean()时才会被实例化


2、在 Spring 中，构成应用程序主干并由Spring IOC容器管理的对象称为bean。
bean是一个由Spring IoC容器实例化、组装和管理的对象。
3、概念简单明了，我们提取处关键的信息：
    bean是对象，一个或者多个不限定
    bean由Spring中一个叫IoC的东西管理
    我们的应用程序由一个个bean构成

